// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: convert/v1/convert.proto

package convertv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request for conversion.
type ConvertValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the original value
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// the original unit
	FromUnit string `protobuf:"bytes,2,opt,name=from_unit,json=fromUnit,proto3" json:"from_unit,omitempty"`
	// the target unit
	ToUnit string `protobuf:"bytes,3,opt,name=to_unit,json=toUnit,proto3" json:"to_unit,omitempty"`
}

func (x *ConvertValueRequest) Reset() {
	*x = ConvertValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convert_v1_convert_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertValueRequest) ProtoMessage() {}

func (x *ConvertValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_convert_v1_convert_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertValueRequest.ProtoReflect.Descriptor instead.
func (*ConvertValueRequest) Descriptor() ([]byte, []int) {
	return file_convert_v1_convert_proto_rawDescGZIP(), []int{0}
}

func (x *ConvertValueRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConvertValueRequest) GetFromUnit() string {
	if x != nil {
		return x.FromUnit
	}
	return ""
}

func (x *ConvertValueRequest) GetToUnit() string {
	if x != nil {
		return x.ToUnit
	}
	return ""
}

// The response for conversion.
type ConvertValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the converted value
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// the new unit
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *ConvertValueResponse) Reset() {
	*x = ConvertValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convert_v1_convert_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertValueResponse) ProtoMessage() {}

func (x *ConvertValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_convert_v1_convert_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertValueResponse.ProtoReflect.Descriptor instead.
func (*ConvertValueResponse) Descriptor() ([]byte, []int) {
	return file_convert_v1_convert_proto_rawDescGZIP(), []int{1}
}

func (x *ConvertValueResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConvertValueResponse) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

// The request for conversion.
type ConvertCropYieldRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the original value
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// the original unit
	FromUnit string `protobuf:"bytes,2,opt,name=from_unit,json=fromUnit,proto3" json:"from_unit,omitempty"`
	// the target unit
	ToUnit string `protobuf:"bytes,3,opt,name=to_unit,json=toUnit,proto3" json:"to_unit,omitempty"`
	// the crop
	Crop string `protobuf:"bytes,4,opt,name=crop,proto3" json:"crop,omitempty"`
}

func (x *ConvertCropYieldRequest) Reset() {
	*x = ConvertCropYieldRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convert_v1_convert_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertCropYieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertCropYieldRequest) ProtoMessage() {}

func (x *ConvertCropYieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_convert_v1_convert_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertCropYieldRequest.ProtoReflect.Descriptor instead.
func (*ConvertCropYieldRequest) Descriptor() ([]byte, []int) {
	return file_convert_v1_convert_proto_rawDescGZIP(), []int{2}
}

func (x *ConvertCropYieldRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConvertCropYieldRequest) GetFromUnit() string {
	if x != nil {
		return x.FromUnit
	}
	return ""
}

func (x *ConvertCropYieldRequest) GetToUnit() string {
	if x != nil {
		return x.ToUnit
	}
	return ""
}

func (x *ConvertCropYieldRequest) GetCrop() string {
	if x != nil {
		return x.Crop
	}
	return ""
}

// The response for conversion.
type ConvertCropYieldResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the converted value
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// the new unit
	Unit string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	// the crop
	Crop string `protobuf:"bytes,3,opt,name=crop,proto3" json:"crop,omitempty"`
}

func (x *ConvertCropYieldResponse) Reset() {
	*x = ConvertCropYieldResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_convert_v1_convert_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertCropYieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertCropYieldResponse) ProtoMessage() {}

func (x *ConvertCropYieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_convert_v1_convert_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertCropYieldResponse.ProtoReflect.Descriptor instead.
func (*ConvertCropYieldResponse) Descriptor() ([]byte, []int) {
	return file_convert_v1_convert_proto_rawDescGZIP(), []int{3}
}

func (x *ConvertCropYieldResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ConvertCropYieldResponse) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ConvertCropYieldResponse) GetCrop() string {
	if x != nil {
		return x.Crop
	}
	return ""
}

var File_convert_v1_convert_proto protoreflect.FileDescriptor

var file_convert_v1_convert_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x61, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x40, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x72, 0x6f, 0x70, 0x22, 0x58, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x72, 0x6f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x72, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x70,
	0x32, 0xc6, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x43, 0x72, 0x6f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x9c, 0x01, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x77, 0x61,
	0x67, 0x2f, 0x73, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_convert_v1_convert_proto_rawDescOnce sync.Once
	file_convert_v1_convert_proto_rawDescData = file_convert_v1_convert_proto_rawDesc
)

func file_convert_v1_convert_proto_rawDescGZIP() []byte {
	file_convert_v1_convert_proto_rawDescOnce.Do(func() {
		file_convert_v1_convert_proto_rawDescData = protoimpl.X.CompressGZIP(file_convert_v1_convert_proto_rawDescData)
	})
	return file_convert_v1_convert_proto_rawDescData
}

var file_convert_v1_convert_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_convert_v1_convert_proto_goTypes = []any{
	(*ConvertValueRequest)(nil),      // 0: convert.v1.ConvertValueRequest
	(*ConvertValueResponse)(nil),     // 1: convert.v1.ConvertValueResponse
	(*ConvertCropYieldRequest)(nil),  // 2: convert.v1.ConvertCropYieldRequest
	(*ConvertCropYieldResponse)(nil), // 3: convert.v1.ConvertCropYieldResponse
}
var file_convert_v1_convert_proto_depIdxs = []int32{
	0, // 0: convert.v1.ConvertService.ConvertValue:input_type -> convert.v1.ConvertValueRequest
	2, // 1: convert.v1.ConvertService.ConvertCropYield:input_type -> convert.v1.ConvertCropYieldRequest
	1, // 2: convert.v1.ConvertService.ConvertValue:output_type -> convert.v1.ConvertValueResponse
	3, // 3: convert.v1.ConvertService.ConvertCropYield:output_type -> convert.v1.ConvertCropYieldResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_convert_v1_convert_proto_init() }
func file_convert_v1_convert_proto_init() {
	if File_convert_v1_convert_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_convert_v1_convert_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convert_v1_convert_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convert_v1_convert_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertCropYieldRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_convert_v1_convert_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertCropYieldResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_convert_v1_convert_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_convert_v1_convert_proto_goTypes,
		DependencyIndexes: file_convert_v1_convert_proto_depIdxs,
		MessageInfos:      file_convert_v1_convert_proto_msgTypes,
	}.Build()
	File_convert_v1_convert_proto = out.File
	file_convert_v1_convert_proto_rawDesc = nil
	file_convert_v1_convert_proto_goTypes = nil
	file_convert_v1_convert_proto_depIdxs = nil
}
